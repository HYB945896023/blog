import{_ as s,o as n,c as a,d as e}from"./app.92214221.js";const C=JSON.parse('{"title":"前端学习","description":"","frontmatter":{},"headers":[{"level":2,"title":"技巧集合","slug":"技巧集合","link":"#技巧集合","children":[]},{"level":2,"title":"1. 列表倒序展示","slug":"_1-列表倒序展示","link":"#_1-列表倒序展示","children":[]},{"level":2,"title":"2.调试技巧(chrome)","slug":"_2-调试技巧-chrome","link":"#_2-调试技巧-chrome","children":[]},{"level":2,"title":"3.批量导入模块，require.context","slug":"_3-批量导入模块-require-context","link":"#_3-批量导入模块-require-context","children":[]}],"relativePath":"note/frontend/index.md","lastUpdated":1685009825000}'),l={name:"note/frontend/index.md"},o=e(`<h1 id="前端学习" tabindex="-1">前端学习 <a class="header-anchor" href="#前端学习" aria-hidden="true">#</a></h1><h2 id="技巧集合" tabindex="-1">技巧集合 <a class="header-anchor" href="#技巧集合" aria-hidden="true">#</a></h2><ul><li>次方运算:4 的三次方&gt;<code>4**3</code></li><li>小数向下取整:6.8 向下取整&gt;<code>~~6.8=6</code></li><li>在字符串前后添加字符:length 为字符串的总长度 <code>str.padStart(length,&#39;xx&#39;)/padEnd</code></li><li>直接过滤单个数组中的虚假值：<code>array.filter(boolean)</code></li><li>字符串去重：<div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">哈哈哈哈</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> s </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Set</span><span style="color:#A6ACCD;">(str)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#A6ACCD;">(s)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><h2 id="_1-列表倒序展示" tabindex="-1">1. 列表倒序展示 <a class="header-anchor" href="#_1-列表倒序展示" aria-hidden="true">#</a></h2><p>一开始想着各种数组倒序与寻找 v-for 倒序方法： 后来想到了直接使用 flex 布局的倒排 在父盒子中加上以下类名即可</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">signContent</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> flex</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">flex-direction</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> column-reverse</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="_2-调试技巧-chrome" tabindex="-1">2.调试技巧(chrome) <a class="header-anchor" href="#_2-调试技巧-chrome" aria-hidden="true">#</a></h2><h4 id="_1-控制台更改参数" tabindex="-1">(1)控制台更改参数 <a class="header-anchor" href="#_1-控制台更改参数" aria-hidden="true">#</a></h4><p>发起请求后需要更改参数再次请求:找到请求后选择 copy&gt;copy as fetch&gt;在控制台中粘贴回车即可</p><h4 id="_2-console-多样化" tabindex="-1">(2)console 多样化 <a class="header-anchor" href="#_2-console-多样化" aria-hidden="true">#</a></h4><ul><li>console.table 打印对象</li><li>console.dir 打印 dom 信息</li><li>console.assert(y,&#39;xxx&#39;) 可以简化 if+console,当 y 为 false 那么就会输出错误信息：xxx</li><li>console.time/timeend,监控代码的性能</li></ul><h4 id="_3-让网页可编辑化" tabindex="-1">(3)让网页可编辑化 <a class="header-anchor" href="#_3-让网页可编辑化" aria-hidden="true">#</a></h4><p><code>document.designMode = &quot;on&quot;</code>可用于临时展示效果</p><h2 id="_3-批量导入模块-require-context" tabindex="-1">3.批量导入模块，require.context <a class="header-anchor" href="#_3-批量导入模块-require-context" aria-hidden="true">#</a></h2><p><code>require.context</code>是 Webpack 提供的一个函数，用于在编译时动态地导入模块。它并不是 Vue 特有的语法，而是 Webpack 的功能之一。</p><p>通过使用<code>require.context</code>，你可以指定一个目录并使用正则表达式来匹配该目录下的文件，并自动导入符合条件的模块。这在 Vue 项目中经常用于自动化地导入组件、路由配置等。</p><p><code>require.context</code>接受三个参数：</p><ol><li>目录路径：指定要搜索的目录路径。</li><li>是否搜索子目录：指定是否搜索子目录，默认为 true。</li><li>匹配文件的正则表达式：指定要匹配的文件名的正则表达式。</li></ol><p>下面是一个示例，展示如何使用<code>require.context</code>导入组件：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 导入以.vue为后缀的文件</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> requireComponent </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> require</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">context</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./components</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">requireComponent</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">fileName</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">componentConfig</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">requireComponent</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">fileName</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">componentName</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fileName</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;font-style:italic;">^</span><span style="color:#A6ACCD;">\\.\\/</span><span style="color:#89DDFF;">(</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">*)</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">\\w</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">$1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">component</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">componentName</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">componentConfig</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">default</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">componentConfig</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在上述示例中，我们使用<code>require.context</code>函数创建了一个上下文，指定要从<code>./components</code>目录下导入以<code>.vue</code>为后缀的文件。</p><p>然后，通过<code>requireComponent.keys()</code>获取匹配到的文件路径列表，并使用<code>forEach</code>遍历每个文件。</p><p>在循环内部，我们通过<code>requireComponent(fileName)</code>导入每个文件的模块。通过使用正则表达式来提取文件名，我们将组件的配置对象注册为全局组件，并指定组件名为提取到的文件名。</p><p>这样，使用<code>require.context</code>结合循环和动态导入的方式，可以自动地导入指定目录下的组件，无需手动一个个导入，从而简化了代码的编写和维护。</p>`,24),p=[o];function t(r,c,i,D,y,F){return n(),a("div",null,p)}const A=s(l,[["render",t]]);export{C as __pageData,A as default};
