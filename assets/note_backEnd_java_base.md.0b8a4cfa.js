import{_ as o,o as e,c as n,d as t}from"./app.92214221.js";const P=JSON.parse('{"title":"Java基础","description":"","frontmatter":{},"headers":[{"level":3,"title":"1. 类加载流程","slug":"_1-类加载流程","link":"#_1-类加载流程","children":[]}],"relativePath":"note/backEnd/java/base.md","lastUpdated":1699523741000}'),a={name:"note/backEnd/java/base.md"},s=t('<h1 id="java基础" tabindex="-1">Java基础 <a class="header-anchor" href="#java基础" aria-hidden="true">#</a></h1><h3 id="_1-类加载流程" tabindex="-1">1. 类加载流程 <a class="header-anchor" href="#_1-类加载流程" aria-hidden="true">#</a></h3><p>从类加载的角度来分析创建一个类 <code>Person</code> 并调用其方法的过程，可以分为以下步骤：</p><ol><li><p><strong>加载（Loading）</strong>：在类加载的第一阶段，Java虚拟机（JVM）会查找并加载 <code>Person</code> 类的字节码文件，通常是从类文件（.class 文件）中加载。这个过程通常由类加载器完成，类加载器会在类路径中查找并读取字节码文件，然后将字节码转换为JVM内部的数据结构。如果类加载器找不到类文件或者类文件不合法，将抛出<code>ClassNotFoundException</code>。</p></li><li><p><strong>链接（Linking）</strong>：在链接阶段，JVM会执行以下子阶段：</p><ul><li><p><strong>验证（Verification）</strong>：JVM会验证字节码是否符合Java虚拟机规范，以防止恶意代码或不合法的字节码。这包括类型检查、访问权限验证等。</p></li><li><p><strong>准备（Preparation）</strong>：在准备阶段，JVM会为类的静态变量分配内存并设置默认初始值。在这个时候，<code>Person</code> 类的静态变量将被分配内存并设置为默认值（例如0或null）。</p></li><li><p><strong>解析（Resolution）</strong>：解析阶段将符号引用（例如方法和字段的引用）解析为直接引用，以便后续的方法调用能够正确地找到对应的方法。</p></li></ul></li><li><p><strong>初始化（Initialization）</strong>：初始化是类加载的最后一个阶段。在初始化阶段，JVM会执行 <code>Person</code> 类的静态初始化器（<code>&lt;clinit&gt;</code>方法），这个方法包含了静态变量的赋值和其他静态初始化操作。如果 <code>Person</code> 类实现了静态代码块，也会在这个阶段执行。只有在初始化完成之后，<code>Person</code> 类的方法才能被调用。</p></li><li><p><strong>方法调用</strong>：在初始化完成之后，你可以创建 <code>Person</code> 类的实例并调用其方法。这些方法的执行是基于已加载、链接和初始化的 <code>Person</code> 类的实例。</p></li><li><p><strong>输出方法的返回值</strong>：当你调用 <code>Person</code> 类的方法并输出其返回值时，JVM将执行该方法，并根据方法的逻辑计算返回值。这个过程是在堆内存中分配一个 <code>Person</code> 对象，并调用对象的方法来计算返回值。</p></li></ol><p>总的来说，类加载的过程包括加载、链接和初始化阶段，只有在初始化完成后，类的方法才能被正常调用和执行。所以，在输出方法的返回值之前，<code>Person</code> 类必须先完成加载和初始化。 类存在 <strong>静态初始化块</strong>和 <strong>实例初始化块</strong>，静态初始化块在类加载时执行，实例初始化块在实例化时执行，静态初始化块只执行一次，实例初始化块每次实例化都会执行。</p>',5),r=[s];function c(d,i,l,p,_,g){return e(),n("div",null,r)}const u=o(a,[["render",c]]);export{P as __pageData,u as default};
