import{_ as s,o as e,c as a,d as n}from"./app.92214221.js";const h=JSON.parse('{"title":"ReactHooks学习","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. useEffect","slug":"_1-useeffect","link":"#_1-useeffect","children":[]},{"level":2,"title":"2. useMome","slug":"_2-usemome","link":"#_2-usemome","children":[]},{"level":2,"title":"3. useCallback","slug":"_3-usecallback","link":"#_3-usecallback","children":[]},{"level":2,"title":"4. useReducer(高阶useState)","slug":"_4-usereducer-高阶usestate","link":"#_4-usereducer-高阶usestate","children":[]},{"level":2,"title":"5. useRef","slug":"_5-useref","link":"#_5-useref","children":[]},{"level":2,"title":"6. useContext","slug":"_6-usecontext","link":"#_6-usecontext","children":[]},{"level":2,"title":"7. useLayoutEffect","slug":"_7-uselayouteffect","link":"#_7-uselayouteffect","children":[]},{"level":2,"title":"8. useImperativeHandle","slug":"_8-useimperativehandle","link":"#_8-useimperativehandle","children":[]},{"level":2,"title":"1.  useEffect","slug":"_1-useeffect-1","link":"#_1-useeffect-1","children":[]},{"level":2,"title":"2.useRef","slug":"_2-useref","link":"#_2-useref","children":[]},{"level":2,"title":"3.useMemo","slug":"_3-usememo","link":"#_3-usememo","children":[]},{"level":2,"title":"4.useCallback","slug":"_4-usecallback","link":"#_4-usecallback","children":[]}],"relativePath":"note/frontend/React/hooks.md","lastUpdated":1696931975000}'),l={name:"note/frontend/React/hooks.md"},p=n(`<h1 id="reacthooks学习" tabindex="-1">ReactHooks学习 <a class="header-anchor" href="#reacthooks学习" aria-hidden="true">#</a></h1><h2 id="_1-useeffect" tabindex="-1">1. useEffect <a class="header-anchor" href="#_1-useeffect" aria-hidden="true">#</a></h2><h2 id="_2-usemome" tabindex="-1">2. useMome <a class="header-anchor" href="#_2-usemome" aria-hidden="true">#</a></h2><h2 id="_3-usecallback" tabindex="-1">3. useCallback <a class="header-anchor" href="#_3-usecallback" aria-hidden="true">#</a></h2><h2 id="_4-usereducer-高阶usestate" tabindex="-1">4. useReducer(高阶useState) <a class="header-anchor" href="#_4-usereducer-高阶usestate" aria-hidden="true">#</a></h2><h2 id="_5-useref" tabindex="-1">5. useRef <a class="header-anchor" href="#_5-useref" aria-hidden="true">#</a></h2><h2 id="_6-usecontext" tabindex="-1">6. useContext <a class="header-anchor" href="#_6-usecontext" aria-hidden="true">#</a></h2><h2 id="_7-uselayouteffect" tabindex="-1">7. useLayoutEffect <a class="header-anchor" href="#_7-uselayouteffect" aria-hidden="true">#</a></h2><h2 id="_8-useimperativehandle" tabindex="-1">8. useImperativeHandle <a class="header-anchor" href="#_8-useimperativehandle" aria-hidden="true">#</a></h2><h2 id="_1-useeffect-1" tabindex="-1">1. useEffect <a class="header-anchor" href="#_1-useeffect-1" aria-hidden="true">#</a></h2><p>类似于vue中的watch， useEffect在每次函数组件发生变化都会重新执行，接受两个参数，第一个是回调函数，第二个参数是依赖数组</p><ol><li>情况1：不传依赖数组，则每次组件渲染都会执行</li><li>情况2：依赖数组为空（[]）则只在初次渲染一次</li><li>情况3：依赖数组中有值，那么只有在该值发生变化时才会执行(挂载同样会执行) 回调函数中可以返回额外的一个函数，会在组件卸载时去运行，这里可以作一些卸载监听、释放资源的操作。</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">useEffect</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">我只会执行依次</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">setNumber</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">666</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">strRef</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">current</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">focus</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2000</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">   </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 清除副作用</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;">[str])</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="_2-useref" tabindex="-1">2.useRef <a class="header-anchor" href="#_2-useref" aria-hidden="true">#</a></h2><p>与vue3中用法类似：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> strRef </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">useRef</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_3-usememo" tabindex="-1">3.useMemo <a class="header-anchor" href="#_3-usememo" aria-hidden="true">#</a></h2><p>类似于vue中的计算属性 useMemo接受两个参数，第一个是回调函数，第二个是依赖数组，只有当依赖数组中的值发生变化时才会重新执行回调函数，否则会返回上一次的值。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> memo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useMemo</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">number</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;">[number])</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_4-usecallback" tabindex="-1">4.useCallback <a class="header-anchor" href="#_4-usecallback" aria-hidden="true">#</a></h2><p>类似于vue中的methods，useCallback接受两个参数，第一个是回调函数，第二个是依赖数组，只有当依赖数组中的值发生变化时才会重新执行回调函数，否则会返回上一次的值。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> callback </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useCallback</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">callback</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;">[number])</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,22),o=[p];function t(r,c,i,u,d,y){return e(),a("div",null,o)}const D=s(l,[["render",t]]);export{h as __pageData,D as default};
